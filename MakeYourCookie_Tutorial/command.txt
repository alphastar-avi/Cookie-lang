cd MakeYourOwnCookie && \                                    // Change to the MakeYourOwnCookie directory

for mac & unix system

gcc -shared -fPIC runtime.c -o libruntime.so && \                                   // Build the runtime library (libruntime.so)
bison -d parser.y && \                                                              // Generate the parser (parser.tab.c and parser.tab.h)
flex lexer.l && \                                                                   // Generate the lexer (lex.yy.c)
gcc -c ast.c -o ast.o && \                                                          // Compile the AST implementation (ast.o)
gcc -c parser.tab.c -o parser.tab.o && \                                            // Compile the parser (parser.tab.o)
gcc -c lex.yy.c -o lex.yy.o && \                                                    // Compile the lexer (lex.yy.o)
gcc -c runtime.c -o runtime.o && \                                                  // Compile the runtime (runtime.o)
g++ -c codegen.cpp -o codegen.o $(llvm-config --cxxflags) && \                      // Compile the code generator (codegen.o) with LLVM flags
g++ ast.o parser.tab.o lex.yy.o codegen.o runtime.o -o compiler $(llvm-config --ldflags --libs core) && \ // Link everything into the compiler binary
cat test.cook | ./compiler > output.ll && \                                        // Run the compiler on test.cook and capture the IR in output.ll
lli -load ./libruntime.so output.ll                                                // Execute the generated IR using lli and load the runtime library


for windows

gcc -shared -fPIC runtime.c -o libruntime.so
bison -d parser.y
flex lexer.l
gcc -c ast.c -o ast.o
gcc -c parser.tab.c -o parser.tab.o
gcc -c lex.yy.c -o lex.yy.o
g++ -c codegen.cpp -o codegen.o $(llvm-config --cxxflags)
g++ ast.o parser.tab.o lex.yy.o codegen.o -o compiler $(llvm-config --ldflags --libs core)
Get-Content .\lang.cook | .\compiler > output.ll
lli -load ./libruntime.so output.ll
